#!/usr/bin/env python3
"""
Document Generator Script - Creates multiple document formats
Generates PDF, HTML, text, markdown, and JSON files
"""

import os
import sys
import json
from datetime import datetime

# Check for optional dependencies
try:
    from reportlab.lib.pagesizes import letter, A4
    from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
    from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
    from reportlab.lib.units import inch
    from reportlab.lib import colors
    HAS_REPORTLAB = True
except ImportError:
    HAS_REPORTLAB = False

try:
    from jinja2 import Template
    HAS_JINJA2 = True
except ImportError:
    HAS_JINJA2 = False

def create_pdf_document(title="Sample Document", filename="document.pdf"):
    """Create a PDF document using ReportLab."""
    if not HAS_REPORTLAB:
        # Create a simple text file instead
        print("ReportLab not available, creating text version instead")
        text_filename = filename.replace('.pdf', '_fallback.txt')
        with open(text_filename, 'w') as f:
            f.write(f"PDF DOCUMENT (Text Version)\n")
            f.write("=" * 40 + "\n\n")
            f.write(f"Title: {title}\n")
            f.write(f"Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")
            f.write("This would have been a PDF document, but ReportLab is not available.\n")
            f.write("The document would contain formatted text, tables, and styling.\n")
        return text_filename
    
    # Create PDF document
    doc = SimpleDocTemplate(filename, pagesize=letter, rightMargin=72, leftMargin=72,
                           topMargin=72, bottomMargin=18)
    
    # Container for the 'Flowable' objects
    story = []
    
    # Get styles
    styles = getSampleStyleSheet()
    
    # Custom styles
    title_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Heading1'],
        fontSize=24,
        spaceAfter=30,
        alignment=1,  # Center alignment
        textColor=colors.darkblue
    )
    
    # Add title
    story.append(Paragraph(title, title_style))
    story.append(Spacer(1, 12))
    
    # Add content
    content = [
        "This is a sample PDF document generated by the Document Generator Script.",
        "",
        "The document demonstrates various PDF features including:",
        "• Formatted text with different styles",
        "• Tables with data",
        "• Multiple sections and paragraphs",
        "• Professional layout and styling",
        "",
        "This PDF was generated automatically and can contain any content you need."
    ]
    
    for line in content:
        if line:
            story.append(Paragraph(line, styles['Normal']))
        story.append(Spacer(1, 6))
    
    # Add a table
    data = [
        ['Feature', 'Status', 'Description'],
        ['Text Formatting', 'Supported', 'Multiple font styles and sizes'],
        ['Tables', 'Supported', 'Structured data presentation'],
        ['Images', 'Supported', 'Embedded graphics and charts'],
        ['Layout', 'Supported', 'Professional document structure']
    ]
    
    table = Table(data)
    table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, 0), 14),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
        ('GRID', (0, 0), (-1, -1), 1, colors.black)
    ]))
    
    story.append(Spacer(1, 12))
    story.append(Paragraph("Feature Comparison Table", styles['Heading2']))
    story.append(Spacer(1, 6))
    story.append(table)
    
    # Add footer information
    story.append(Spacer(1, 20))
    footer_text = f"Generated on {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} by Document Generator Script"
    story.append(Paragraph(footer_text, styles['Normal']))
    
    # Build PDF
    doc.build(story)
    
    print(f"Created PDF document: {filename}")
    return filename

def create_html_document(title="Sample Document", filename="document.html"):
    """Create an HTML document."""
    
    # HTML template
    html_template = """<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{ title }}</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            line-height: 1.6;
            color: #333;
        }
        .header {
            background-color: #f4f4f4;
            padding: 20px;
            border-radius: 5px;
            margin-bottom: 20px;
            text-align: center;
        }
        h1 {
            color: #2c3e50;
            margin-bottom: 10px;
        }
        h2 {
            color: #34495e;
            border-bottom: 2px solid #3498db;
            padding-bottom: 5px;
        }
        .status {
            color: #27ae60;
            font-weight: bold;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin: 20px 0;
        }
        th, td {
            border: 1px solid #ddd;
            padding: 12px;
            text-align: left;
        }
        th {
            background-color: #3498db;
            color: white;
        }
        tr:nth-child(even) {
            background-color: #f2f2f2;
        }
        .footer {
            margin-top: 40px;
            padding-top: 20px;
            border-top: 1px solid #eee;
            font-size: 0.9em;
            color: #666;
        }
        .feature-list {
            background-color: #ecf0f1;
            padding: 15px;
            border-radius: 5px;
            margin: 15px 0;
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>{{ title }}</h1>
        <p><strong>Status:</strong> <span class="status">Successfully Generated</span></p>
        <p>Generated on: {{ timestamp }}</p>
    </div>

    <h2>Report Overview</h2>
    <p>This HTML document demonstrates the capabilities of the Document Generator Script. 
    It showcases various HTML features and styling options that can be used to create 
    professional-looking documents.</p>

    <h2>Features Included</h2>
    <div class="feature-list">
        <ul>
            <li>Responsive design that works on all devices</li>
            <li>Professional CSS styling</li>
            <li>Tables for structured data presentation</li>
            <li>Multiple sections and content types</li>
            <li>Cross-browser compatibility</li>
        </ul>
    </div>

    <h2>Sample Data Table</h2>
    <table>
        <thead>
            <tr>
                <th>Component</th>
                <th>Status</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>HTML Structure</td>
                <td>Optimal</td>
                <td>Semantic and accessible markup</td>
            </tr>
            <tr>
                <td>CSS Styling</td>
                <td>Fast</td>
                <td>Modern and responsive design</td>
            </tr>
            <tr>
                <td>Content</td>
                <td>Universal</td>
                <td>Compatible with all browsers</td>
            </tr>
            <tr>
                <td>Layout</td>
                <td>Responsive</td>
                <td>Adapts to different screen sizes</td>
            </tr>
        </tbody>
    </table>

    <h2>Technical Specifications</h2>
    <p>This document was generated using:</p>
    <ul>
        <li>HTML5 for structure</li>
        <li>CSS3 for styling</li>
        <li>Responsive design principles</li>
        <li>Cross-browser compatible code</li>
        <li>Semantic markup for accessibility</li>
    </ul>

    <div class="footer">
        <p>Document generated by Document Generator Script v1.0</p>
        <p>For more information, visit our documentation.</p>
    </div>
</body>
</html>"""
    
    # Render template
    if HAS_JINJA2:
        template = Template(html_template)
        html_content = template.render(
            title=title,
            timestamp=datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        )
    else:
        # Simple string replacement if Jinja2 not available
        html_content = html_template.replace('{{ title }}', title)
        html_content = html_content.replace('{{ timestamp }}', datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
    
    # Save HTML file
    output_path = os.path.join(os.getcwd(), filename)
    with open(output_path, 'w', encoding='utf-8') as f:
        f.write(html_content)
    
    print(f"Created HTML document: {filename}")
    return output_path

def create_text_document(title="Sample Document", filename="document.txt"):
    """Create a plain text document."""
    
    content = f"""
{title}
{'=' * len(title)}

Generated on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

OVERVIEW
--------
This is a sample text document created by the Document Generator Script.
It demonstrates how to create well-formatted plain text documents that
are readable and structured.

FEATURES
--------
• Plain text format for universal compatibility
• Structured layout with clear sections
• ASCII art and formatting using text characters
• Cross-platform compatibility
• Lightweight and fast to process

CONTENT SECTIONS
----------------

1. Introduction
   This document serves as an example of what can be generated
   automatically using the document creation system.

2. Data Summary
   The following information shows various metrics and statistics:
   
   - Total documents generated: 1
   - Format: Plain Text (.txt)
   - Size: Variable based on content
   - Compatibility: Universal

3. Technical Details
   
   Document Properties:
   - Encoding: UTF-8
   - Line endings: Platform appropriate
   - Font: Monospace recommended
   - Wrapping: 70 characters per line (recommended)

SAMPLE DATA TABLE
-----------------
| Item          | Value      | Status    |
|---------------|------------|-----------|
| Text Format   | Supported  | Active    |
| Unicode       | Full       | Enabled   |
| Formatting    | Basic      | Available |
| Portability   | Excellent  | Standard  |

CONCLUSION
----------
This text document demonstrates the creation of structured,
readable plain text files that can be used across any platform
or application that supports text display.

---
End of Document
Generated by Document Generator Script v1.0
"""
    
    output_path = os.path.join(os.getcwd(), filename)
    with open(output_path, 'w', encoding='utf-8') as f:
        f.write(content.strip())
    
    print(f"Created text document: {filename}")
    return output_path

def create_markdown_document(title="Sample Document", filename="document.md"):
    """Create a Markdown document."""
    
    content = f"""# {title}

**Generated on:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}  
**Version:** 1.0  
**Status:** Complete

## Overview

This is a sample Markdown document created by the **Document Generator Script**. 
It demonstrates various Markdown features and formatting options that can be used 
to create rich, structured documents.

## Features

The Markdown format supports many useful features:

- **Bold** and *italic* text formatting
- `Inline code` and code blocks
- Links and references
- Tables and lists
- Headers and sections
- Blockquotes and emphasis

### Code Example

```python
def create_document():
    print("Creating a new document...")
    return "Document created successfully!"
```

## Document Statistics

| Feature | Status | Notes |
|---------|---------|-------|
| Headers | Supported | Multiple levels |
| Lists | Supported | Ordered and unordered |
| Code | Supported | Inline and blocks |
| Tables | Supported | With alignment |
| Links | Supported | Internal and external |

## Advanced Formatting

> This is a blockquote example. It can be used to highlight important 
> information or quotes from other sources.

### Lists

1. First ordered item
2. Second ordered item
   - Nested unordered item
   - Another nested item
3. Third ordered item

### Links and References

- [Markdown Guide](https://www.markdownguide.org/)
- [GitHub Flavored Markdown](https://github.github.com/gfm/)

## Document Statistics

- **Words:** Approximately 200
- **Sections:** 6 main sections
- **Tables:** 1 feature comparison
- **Code blocks:** 1 Python example

## Use Cases

This type of document is perfect for:

- Technical documentation
- README files
- Project reports
- API documentation
- User guides
- Blog posts

---

## Footer

*Document generated by Document Generator Script v1.0*  
*For more information, see the project documentation.*
"""
    
    output_path = os.path.join(os.getcwd(), filename)
    with open(output_path, 'w', encoding='utf-8') as f:
        f.write(content)
    
    print(f"Created Markdown document: {filename}")
    return output_path

def create_json_metadata(title="Sample Document", generated_files=None, filename="document_metadata.json"):
    """Create JSON metadata for all generated documents."""
    
    if generated_files is None:
        generated_files = []
    
    metadata = {
        "document_info": {
            "title": title,
            "generated_at": datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            "generator": "Document Generator Script v1.0",
            "total_files": len(generated_files)
        },
        "files": {},
        "formats": {
            "pdf": {"available": HAS_REPORTLAB, "description": "Portable Document Format"},
            "html": {"available": True, "description": "HyperText Markup Language"},
            "txt": {"available": True, "description": "Plain Text"},
            "md": {"available": True, "description": "Markdown"},
            "json": {"available": True, "description": "JavaScript Object Notation"}
        },
        "dependencies": {
            "reportlab": {"installed": HAS_REPORTLAB, "purpose": "PDF generation"},
            "jinja2": {"installed": HAS_JINJA2, "purpose": "Template rendering"}
        },
        "statistics": {
            "execution_time": "< 1 second",
            "total_size": "Variable",
            "compatibility": "Cross-platform"
        }
    }
    
    # Add file information
    for file_path in generated_files:
        if os.path.exists(file_path):
            file_stats = os.stat(file_path)
            file_name = os.path.basename(file_path)
            file_ext = os.path.splitext(file_name)[1]
            
            metadata["files"][file_name] = {
                "path": file_path,
                "size_bytes": file_stats.st_size,
                "format": file_ext,
                "created": datetime.fromtimestamp(file_stats.st_ctime).strftime('%Y-%m-%d %H:%M:%S')
            }
    
    output_path = os.path.join(os.getcwd(), filename)
    with open(output_path, 'w') as f:
        json.dump(metadata, f, indent=2)
    
    print(f"Created JSON metadata: {filename}")
    return output_path

def main():
    """Main document generation function."""
    print("DOCUMENT GENERATOR SCRIPT")
    print("=" * 35)
    print("Creating documents in multiple formats")
    print()
    
    # Check for missing dependencies
    missing_deps = []
    if not HAS_REPORTLAB:
        missing_deps.append("reportlab")
    if not HAS_JINJA2:
        missing_deps.append("jinja2")
    
    if missing_deps:
        print(f"Missing optional packages: {', '.join(missing_deps)}")
        print("Enable 'Auto-install missing packages' for full functionality")
        print()
    
    # Parse command line arguments
    doc_title = "Sample Document"
    if len(sys.argv) > 1:
        doc_title = " ".join(sys.argv[1:])
    
    print(f"Creating documents with title: '{doc_title}'")
    print()
    
    generated_files = []
    
    try:
        # Create PDF document
        print("Creating PDF document...")
        if HAS_REPORTLAB:
            pdf_file = create_pdf_document(doc_title, "document.pdf")
        else:
            pdf_file = create_pdf_document(doc_title, "document.pdf")  # Will create text fallback
        generated_files.append(pdf_file)
        
        # Create HTML document
        print("Creating HTML document...")
        html_file = create_html_document(doc_title, "document.html")
        generated_files.append(html_file)
        
        # Create text document
        print("Creating text document...")
        txt_file = create_text_document(doc_title, "document.txt")
        generated_files.append(txt_file)
        
        # Create Markdown document
        print("Creating Markdown document...")
        md_file = create_markdown_document(doc_title, "document.md")
        generated_files.append(md_file)
        
        # Create JSON metadata
        print("Creating JSON metadata...")
        json_file = create_json_metadata(doc_title, generated_files, "document_metadata.json")
        generated_files.append(json_file)
        
        # Final summary
        print("\nDOCUMENT GENERATION COMPLETE!")
        print(f"Generated {len(generated_files)} files:")
        for i, file_path in enumerate(generated_files, 1):
            file_name = os.path.basename(file_path)
            print(f"   {i}. {file_name}")
        
        print(f"\nSummary:")
        print(f"   • Document title: '{doc_title}'")
        print(f"   • Formats created: {len(generated_files)}")
        print(f"   • PDF support: {'Yes' if HAS_REPORTLAB else 'No'}")
        print(f"   • HTML templating: {'Yes' if HAS_JINJA2 else 'No'}")
        
    except Exception as e:
        print(f"Error: {e}")
        return

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\nDocument generation interrupted by user")
        sys.exit(0)
    except Exception as e:
        print(f"Unexpected error: {e}")
        sys.exit(1) 